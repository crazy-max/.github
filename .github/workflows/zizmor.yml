name: zizmor

on:
  workflow_call:
    inputs:
      args:
        required: false
        type: string

jobs:
  zizmor:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      -
        name: Prepare
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            await core.group(`Checking for existing workflows`, async () => {
              const workflows = fs.readdirSync('.github/workflows').filter(file => file.endsWith('.yml') || file.endsWith('.yaml'));
              if (workflows.length > 0) {
                core.info(`${workflows.length} workflows found.`);
                core.exportVariable('HAS_WORKFLOWS', 'true');
              } else {
                core.info("No workflows found, skipping zizmor scan.");
              }
            });

            // https://docs.github.com/en/rest/code-scanning/code-scanning?apiVersion=2022-11-28#list-code-scanning-alerts-for-a-repository
            await core.group(`Check if Advanced Security is enabled on this repository`, async () => {
              await github.request('GET /repos/{owner}/{repo}/code-scanning/alerts', {
                ...context.repo,
              }).then(res => {
                core.info('Advanced Security enabled.');
                core.exportVariable('ADVANCED_SECURITY_ENABLED', 'true');
              }).catch(error => {
                if (error.status === 403) {
                  core.warning('Advanced Security is not enabled on this repository. SARIF report will not be uploaded.');
                } else {
                  core.warning(`Error checking Advanced Security status (${error.status}: ${error.message})`);
                }
              });
            });
      -
        name: Setup uv
        if: ${{ env.HAS_WORKFLOWS }}
        uses: astral-sh/setup-uv@0c5e2b8115b80b4c7c5ddf6ffdd634974642d182 # v5.4.1
        with:
          enable-cache: false
      -
        name: Run zizmor
        if: ${{ env.HAS_WORKFLOWS }}
        uses: actions/github-script@v7
        id: zizmor
        env:
          INPUT_ARGS: ${{ inputs.args }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const os = require('os');
            const path = require('path');

            const uvxArgs = ['zizmor'];
            if (process.env.ADVANCED_SECURITY_ENABLED) {
              uvxArgs.push('--format', 'sarif');
            }
            uvxArgs.push(...core.getInput('args').split(' '), '.');

            const res = await exec.getExecOutput('uvx', uvxArgs, {
              ignoreReturnCode: true
            });
            if (res.stderr.length > 0 && res.exitCode != 0) {
              throw new Error(res.stderr);
            }

            if (process.env.ADVANCED_SECURITY_ENABLED) {
              const resultFile = path.join(fs.mkdtempSync(path.join(`${{ runner.temp }}` || os.tmpdir(), 'zizmor-')), 'results.sarif');
              core.info(`Storing results in ${resultFile}`);
              await fs.writeFileSync(resultFile, res.stdout);
              core.setOutput('result-file', resultFile);
            }
      -
        name: Upload SARIF report
        if: ${{ env.HAS_WORKFLOWS && env.ADVANCED_SECURITY_ENABLED }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.zizmor.outputs.result-file }}
          category: zizmor
